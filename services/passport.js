const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users'); // fetch the model class out of mongoose instead of requiring the whole thing in because reasons (mongoose doesn't like it)

// this method is called by passport after it retrieves a matching user in passport.use() after done() is called.
passport.serializeUser((user, done) => { // the user that is passed in here comes from the done(). Remember this user is the object coming back from mongoDB not what we instantiated with the model class
    done(null, user.id); // this id is what was generated by mongoDB when we created this user object inside mongoDB
});

// this function is called by passport when it detects from the cookie an id. When it gets an id, it will use the model class to find by id on the mongoDB and call done with the found user object.
passport.deserializeUser((id, done) => {
    User.findById(id)
        .then(user => {
            done(null, user);
        });
});

passport.use(
    new GoogleStrategy({
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback' // what google will send back the OAuth code on
    }, (accessToken, refreshToken, profile, done) => { // this callback is called by the passport.authenticate() function in /auth/google/callback automatically
        // console.log('access token', accessToken); // like a permission pass (token) to go to google and make requests for information
        // console.log('refresh token', refreshToken); // a pass to refresh the access token because the access token expires after a period of time
        // console.log('profile', profile); // profile data
        User.findOne({ googleId: profile.id }) // find the first matching key (googleId) with a given value (profile.id) and return it
            .then((existingUser) => { // when the promise resolves it will either contain the existing user or it will return null (error first convention)
                if (existingUser) {
                    // we already have a record with the given profile ID
                    done(null, existingUser); // calling done() function to tell passport that we're complete and proceed with the auth flow. First param is an error object. Second param is the user record.
                } else {
                    // we don't have a user record with this ID, make a new record
                    new User({googleId: profile.id}) // creates a new instance of a user
                        .save() // saves it to mongodb
                        .then(user => done(null, user)); // save is an async call too so we're going to wait for it to come back and trigger the then() with the created user from mongo's side
                }
            })

    })
); // creates a new instance of the GoogleStrategy